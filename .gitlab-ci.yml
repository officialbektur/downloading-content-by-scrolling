# .gitlab-ci.yml

stages:
  - build  # Определение стадии сборки
  - deploy  # Определение стадии развертывания

variables:
  REGISTRY: "registry.gitlab.com/officialbektur/downloading-content-by-scrolling"  # Переменная для указания Docker Registry

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY  # Аутентификация в Docker Registry перед выполнением скриптов

app_build:
  stage: build  # Задача сборки относится к стадии сборки
  tags:
    - build  # Используем тег "build" для выполнения на соответствующих агентах
  only:
    - develop  # Выполнять задачу только для ветки develop
  script:
    - docker build --build-arg NODE_ENV="dev" -t "$REGISTRY/dev/app:$CI_COMMIT_SHA" -f ./_docker/cicd/app/Dockerfile .  # Сборка Docker образа приложения с указанием переменной среды
    - docker push "$REGISTRY/dev/app:$CI_COMMIT_SHA"  # Публикация собранного Docker образа в Docker Registry

dev_deploy:
  stage: deploy  # Задача развертывания относится к стадии развертывания
  tags:
    - cicd  # Используем тег "cicd" для выполнения на соответствующих агентах
  only:
    - develop  # Выполнять задачу только для ветки develop
  script:
    - export CONTAINER_PREFIX=project  # Экспортируем префикс для именования контейнеров
    - docker stop $(docker ps -a | grep ${CONTAINER_PREFIX}_ | awk '{print $1}') || true  # Остановка всех контейнеров с указанным префиксом, если они существуют
    - docker rm $(docker ps -a | grep ${CONTAINER_PREFIX}_ | awk '{print $1}') || true  # Удаление всех контейнеров с указанным префиксом, если они существуют
    - docker volume rm $(docker volume ls | grep ${CONTAINER_PREFIX}_ | awk '{print $2}') || true  # Удаление всех Docker томов с указанным префиксом, если они существуют
    - docker-compose -p $CONTAINER_PREFIX -f docker-compose.dev.yml down  # Остановка всех сервисов, определенных в docker-compose.dev.yml
    - docker container prune -f  # Удаление всех неиспользуемых контейнеров
    - docker-compose -p $CONTAINER_PREFIX -f docker-compose.dev.yml up -d  # Запуск всех сервисов, определенных в docker-compose.dev.yml
    - docker exec ${CONTAINER_PREFIX}_app composer install --no-interaction --prefer-dist --optimize-autoloader  # Установка зависимостей Composer без взаимодействия с пользователем
    - docker exec ${CONTAINER_PREFIX}_app npm ci  # Установка зависимостей npm
    - docker exec ${CONTAINER_PREFIX}_app php artisan migrate  # Применение всех миграций базы данных Laravel
    - docker exec ${CONTAINER_PREFIX}_app php artisan cache:clear  # Очистка всех кешей Laravel
    - docker exec ${CONTAINER_PREFIX}_app php artisan config:cache  # Кэширование всех конфигураций Laravel
    - docker exec ${CONTAINER_PREFIX}_app chown -R root:www-data /var/www  # Настройка прав доступа ко всем файлам и директориям в /var/www
    - docker exec ${CONTAINER_PREFIX}_app chmod 755 -R /var/www  # Установка прав доступа 755 для всех файлов и директорий в /var/www
    - docker exec ${CONTAINER_PREFIX}_app chmod 775 -R /var/www/storage  # Установка прав доступа 775 для всех файлов и директорий в /var/www/storage
    - docker exec ${CONTAINER_PREFIX}_app chmod 775 -R /var/www/bootstrap/cache  # Установка прав доступа 775 для всех файлов и директорий в /var/www/bootstrap/cache

    # Опционально: заполнение базы данных тестовыми данными
    - docker exec ${CONTAINER_PREFIX}_app php artisan db:seed
